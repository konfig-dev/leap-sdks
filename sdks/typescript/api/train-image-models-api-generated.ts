/* tslint:disable */
/* eslint-disable */
/**
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListModelsV2Response } from '../models';
// @ts-ignore
import { ModelV2Entity } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TrainImageModelsApi - axios parameter creator
 * @export
 */
export const TrainImageModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint will delete a model. This is not reversible.
         * @summary Delete a Model
         * @param {string} modelId The ID of the model to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: async (modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteModel', 'modelId', modelId)
            const localVarPath = `/api/v2/images/models/{modelId}`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-modelId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will return a single model.
         * @summary Get a Single Model
         * @param {string} modelId The ID of the model to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel: async (modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getModel', 'modelId', modelId)
            const localVarPath = `/api/v2/images/models/{modelId}`
                .replace(`{${"modelId"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-modelId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will return a list of all models for the workspace.
         * @summary List All Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllModels: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/images/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a `webhookUrl` in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
         * @summary Train Model
         * @param {string} [name] Provide a name so you can more easily identify the model.
         * @param {string} [subjectKeyword] This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;.
         * @param {string} [subjectType] The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;.
         * @param {string} [webhookUrl] An optional webhook URL that will be called with a POST request when the model completes training or fails.
         * @param {Array<string>} [imageSampleUrls] An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both.
         * @param {Array<Uint8Array | File>} [imageSampleFiles] An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trainModel: async (name?: string, subjectKeyword?: string, subjectType?: string, webhookUrl?: string, imageSampleUrls?: Array<string>, imageSampleFiles?: Array<Uint8Array | File>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/images/models/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (subjectKeyword !== undefined) { 
                localVarFormParams.append('subjectKeyword', subjectKeyword as any);
            }
    
            if (subjectType !== undefined) { 
                localVarFormParams.append('subjectType', subjectType as any);
            }
    
            if (webhookUrl !== undefined) { 
                localVarFormParams.append('webhookUrl', webhookUrl as any);
            }
                if (imageSampleUrls) {
                localVarFormParams.append('imageSampleUrls', imageSampleUrls.join(COLLECTION_FORMATS.csv));
            }

                if (imageSampleFiles) {
                imageSampleFiles.forEach((element) => {
                    localVarFormParams.append('imageSampleFiles', element as any);
                })
            }

    
    
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());
    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainImageModelsApi - functional programming interface
 * @export
 */
export const TrainImageModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainImageModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint will delete a model. This is not reversible.
         * @summary Delete a Model
         * @param {TrainImageModelsApiDeleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModel(requestParameters: TrainImageModelsApiDeleteModelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelV2Entity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModel(requestParameters.modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will return a single model.
         * @summary Get a Single Model
         * @param {TrainImageModelsApiGetModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModel(requestParameters: TrainImageModelsApiGetModelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelV2Entity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModel(requestParameters.modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will return a list of all models for the workspace.
         * @summary List All Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllModels(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListModelsV2Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllModels(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a `webhookUrl` in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
         * @summary Train Model
         * @param {TrainImageModelsApiTrainModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trainModel(requestParameters: TrainImageModelsApiTrainModelRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelV2Entity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trainModel(requestParameters.name, requestParameters.subjectKeyword, requestParameters.subjectType, requestParameters.webhookUrl, requestParameters.imageSampleUrls, requestParameters.imageSampleFiles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainImageModelsApi - factory interface
 * @export
 */
export const TrainImageModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainImageModelsApiFp(configuration)
    return {
        /**
         * This endpoint will delete a model. This is not reversible.
         * @summary Delete a Model
         * @param {TrainImageModelsApiDeleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(requestParameters: TrainImageModelsApiDeleteModelRequest, options?: AxiosRequestConfig): AxiosPromise<ModelV2Entity> {
            return localVarFp.deleteModel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will return a single model.
         * @summary Get a Single Model
         * @param {TrainImageModelsApiGetModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModel(requestParameters: TrainImageModelsApiGetModelRequest, options?: AxiosRequestConfig): AxiosPromise<ModelV2Entity> {
            return localVarFp.getModel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will return a list of all models for the workspace.
         * @summary List All Models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllModels(options?: AxiosRequestConfig): AxiosPromise<ListModelsV2Response> {
            return localVarFp.listAllModels(options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a `webhookUrl` in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
         * @summary Train Model
         * @param {TrainImageModelsApiTrainModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trainModel(requestParameters: TrainImageModelsApiTrainModelRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ModelV2Entity> {
            return localVarFp.trainModel(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteModel operation in TrainImageModelsApi.
 * @export
 * @interface TrainImageModelsApiDeleteModelRequest
 */
export type TrainImageModelsApiDeleteModelRequest = {
    
    /**
    * The ID of the model to delete.
    * @type {string}
    * @memberof TrainImageModelsApiDeleteModel
    */
    readonly modelId: string
    
}

/**
 * Request parameters for getModel operation in TrainImageModelsApi.
 * @export
 * @interface TrainImageModelsApiGetModelRequest
 */
export type TrainImageModelsApiGetModelRequest = {
    
    /**
    * The ID of the model to retrieve.
    * @type {string}
    * @memberof TrainImageModelsApiGetModel
    */
    readonly modelId: string
    
}

/**
 * Request parameters for trainModel operation in TrainImageModelsApi.
 * @export
 * @interface TrainImageModelsApiTrainModelRequest
 */
export type TrainImageModelsApiTrainModelRequest = {
    
    /**
    * Provide a name so you can more easily identify the model.
    * @type {string}
    * @memberof TrainImageModelsApiTrainModel
    */
    readonly name?: string
    
    /**
    * This is the keyword you will use during image generation to trigger your custom subject. For example \\\"a photo of @me\\\".
    * @type {string}
    * @memberof TrainImageModelsApiTrainModel
    */
    readonly subjectKeyword?: string
    
    /**
    * The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\"person\\\".
    * @type {string}
    * @memberof TrainImageModelsApiTrainModel
    */
    readonly subjectType?: string
    
    /**
    * An optional webhook URL that will be called with a POST request when the model completes training or fails.
    * @type {string}
    * @memberof TrainImageModelsApiTrainModel
    */
    readonly webhookUrl?: string
    
    /**
    * An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both.
    * @type {Array<string>}
    * @memberof TrainImageModelsApiTrainModel
    */
    readonly imageSampleUrls?: Array<string>
    
    /**
    * An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both.
    * @type {Array<Uint8Array | File>}
    * @memberof TrainImageModelsApiTrainModel
    */
    readonly imageSampleFiles?: Array<Uint8Array | File>
    
}

/**
 * TrainImageModelsApiGenerated - object-oriented interface
 * @export
 * @class TrainImageModelsApiGenerated
 * @extends {BaseAPI}
 */
export class TrainImageModelsApiGenerated extends BaseAPI {
    /**
     * This endpoint will delete a model. This is not reversible.
     * @summary Delete a Model
     * @param {TrainImageModelsApiDeleteModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainImageModelsApiGenerated
     */
    public deleteModel(requestParameters: TrainImageModelsApiDeleteModelRequest, options?: AxiosRequestConfig) {
        return TrainImageModelsApiFp(this.configuration).deleteModel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will return a single model.
     * @summary Get a Single Model
     * @param {TrainImageModelsApiGetModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainImageModelsApiGenerated
     */
    public getModel(requestParameters: TrainImageModelsApiGetModelRequest, options?: AxiosRequestConfig) {
        return TrainImageModelsApiFp(this.configuration).getModel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will return a list of all models for the workspace.
     * @summary List All Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainImageModelsApiGenerated
     */
    public listAllModels(options?: AxiosRequestConfig) {
        return TrainImageModelsApiFp(this.configuration).listAllModels(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a `webhookUrl` in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
     * @summary Train Model
     * @param {TrainImageModelsApiTrainModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainImageModelsApiGenerated
     */
    public trainModel(requestParameters: TrainImageModelsApiTrainModelRequest = {}, options?: AxiosRequestConfig) {
        return TrainImageModelsApiFp(this.configuration).trainModel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
