/* tslint:disable */
/* eslint-disable */
/**
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateMusicgenInferenceDto } from '../models';
// @ts-ignore
import { MusicgenInferenceEntity } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MusicApi - axios parameter creator
 * @export
 */
export const MusicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a specific music generation job.
         * @summary Get a Music Generation Job
         * @param {string} inferenceId The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (inferenceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inferenceId' is not null or undefined
            assertParamExists('findOne', 'inferenceId', inferenceId)
            const localVarPath = `/api/v1/music/{inferenceId}`
                .replace(`{${"inferenceId"}}`, encodeURIComponent(String(inferenceId !== undefined ? inferenceId : `-inferenceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the `duration` you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
         * @summary Generate Music
         * @param {CreateMusicgenInferenceDto} createMusicgenInferenceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate: async (createMusicgenInferenceDto: CreateMusicgenInferenceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMusicgenInferenceDto' is not null or undefined
            assertParamExists('generate', 'createMusicgenInferenceDto', createMusicgenInferenceDto)
            const localVarPath = `/api/v1/music`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createMusicgenInferenceDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createMusicgenInferenceDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all music generation jobs for a workspace.
         * @summary List Music Generation Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/music`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MusicApi - functional programming interface
 * @export
 */
export const MusicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MusicApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a specific music generation job.
         * @summary Get a Music Generation Job
         * @param {MusicApiFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(requestParameters: MusicApiFindOneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicgenInferenceEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(requestParameters.inferenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the `duration` you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
         * @summary Generate Music
         * @param {MusicApiGenerateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generate(requestParameters: MusicApiGenerateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicgenInferenceEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generate(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all music generation jobs for a workspace.
         * @summary List Music Generation Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MusicgenInferenceEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MusicApi - factory interface
 * @export
 */
export const MusicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MusicApiFp(configuration)
    return {
        /**
         * Get a specific music generation job.
         * @summary Get a Music Generation Job
         * @param {MusicApiFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(requestParameters: MusicApiFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<MusicgenInferenceEntity> {
            return localVarFp.findOne(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the `duration` you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
         * @summary Generate Music
         * @param {MusicApiGenerateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generate(requestParameters: MusicApiGenerateRequest, options?: AxiosRequestConfig): AxiosPromise<MusicgenInferenceEntity> {
            return localVarFp.generate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all music generation jobs for a workspace.
         * @summary List Music Generation Jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(options?: AxiosRequestConfig): AxiosPromise<Array<MusicgenInferenceEntity>> {
            return localVarFp.listAll(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findOne operation in MusicApi.
 * @export
 * @interface MusicApiFindOneRequest
 */
export type MusicApiFindOneRequest = {
    
    /**
    * The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.
    * @type {string}
    * @memberof MusicApiFindOne
    */
    readonly inferenceId: string
    
}

/**
 * Request parameters for generate operation in MusicApi.
 * @export
 * @interface MusicApiGenerateRequest
 */
export type MusicApiGenerateRequest = {
    
} & CreateMusicgenInferenceDto

/**
 * MusicApiGenerated - object-oriented interface
 * @export
 * @class MusicApiGenerated
 * @extends {BaseAPI}
 */
export class MusicApiGenerated extends BaseAPI {
    /**
     * Get a specific music generation job.
     * @summary Get a Music Generation Job
     * @param {MusicApiFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicApiGenerated
     */
    public findOne(requestParameters: MusicApiFindOneRequest, options?: AxiosRequestConfig) {
        return MusicApiFp(this.configuration).findOne(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the `duration` you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
     * @summary Generate Music
     * @param {MusicApiGenerateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicApiGenerated
     */
    public generate(requestParameters: MusicApiGenerateRequest, options?: AxiosRequestConfig) {
        return MusicApiFp(this.configuration).generate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all music generation jobs for a workspace.
     * @summary List Music Generation Jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MusicApiGenerated
     */
    public listAll(options?: AxiosRequestConfig) {
        return MusicApiFp(this.configuration).listAll(options).then((request) => request(this.axios, this.basePath));
    }
}
