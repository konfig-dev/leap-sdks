/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Leap.Client;
using Leap.Api;
using Leap.Model;

namespace Leap.Test.Api
{
    /// <summary>
    ///  Class for testing ImageModelsApi
    /// </summary>
    public class ImageModelsApiTests : IDisposable
    {
        private LeapClient client;

        public ImageModelsApiTests()
        {
            client = new LeapClient();
            client.SetBasePath("http://127.0.0.1:4010");
            // Configure token for authorization
            client.SetAccessToken("YOUR_TOKEN");

        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test DeleteModel
        /// </summary>
        [Fact]
        public void DeleteModelTest()
        {
            var modelId = "5f9b9c0e-7c1f-4b5c-9c0e-7c1f4b5c9c0e";  // string | The ID of the model to delete.
            
            try
            {
                // Delete a Model
                ModelV2Entity result = client.ImageModels.DeleteModel(modelId);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ImageModelsApi.DeleteModel: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test GetModel
        /// </summary>
        [Fact]
        public void GetModelTest()
        {
            var modelId = "5f9b9c0e-7c1f-4b5c-9c0e-7c1f4b5c9c0e";  // string | The ID of the model to retrieve.
            
            try
            {
                // Get a Single Model
                ModelV2Entity result = client.ImageModels.GetModel(modelId);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ImageModelsApi.GetModel: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListAllModels
        /// </summary>
        [Fact]
        public void ListAllModelsTest()
        {
            
            try
            {
                // List All Models
                ListModelsV2Response result = client.ImageModels.ListAllModels();
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ImageModelsApi.ListAllModels: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test TrainModel
        /// </summary>
        [Fact]
        public void TrainModelTest()
        {
            var name = "name_example";  // string | Provide a name so you can more easily identify the model. (optional) 
            var subjectKeyword = "subjectKeyword_example";  // string | This is the keyword you will use during image generation to trigger your custom subject. For example \\\"a photo of @me\\\". (optional) 
            var subjectType = "\"person\"";  // string | The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\"person\\\". (optional)  (default to "person")
            var webhookUrl = "webhookUrl_example";  // string | An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional) 
            var imageSampleUrls = new List<string>(); // List<string> | An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional) 
            var imageSampleFiles = new List<System.IO.Stream>(); // List<System.IO.Stream> | An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional) 
            
            try
            {
                // Train Model
                ModelV2Entity result = client.ImageModels.TrainModel(name, subjectKeyword, subjectType, webhookUrl, imageSampleUrls, imageSampleFiles);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ImageModelsApi.TrainModel: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }
    }
}
