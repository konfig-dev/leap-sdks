/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Leap.Client;
using Leap.Api;
using Leap.Model;

namespace Leap.Test.Api
{
    /// <summary>
    ///  Class for testing ImagesApi
    /// </summary>
    public class ImagesApiTests : IDisposable
    {
        private LeapClient client;

        public ImagesApiTests()
        {
            client = new LeapClient();
            client.SetBasePath("http://127.0.0.1:4010");
            // Configure token for authorization
            client.SetAccessToken("YOUR_TOKEN");

        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Fact]
        public void DeleteTest()
        {
            var modelId = "26a1a203-3a46-42cb-8cfa-f4de075907d8";  // string | The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models
            var inferenceId = "a047df00-8bdd-4d57-a9bd-6eebef36ecaa";  // string | The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.
            
            try
            {
                // Delete Image Job
                client.Images.Delete(modelId, inferenceId);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ImagesApi.Delete: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test FindOne
        /// </summary>
        [Fact]
        public void FindOneTest()
        {
            var modelId = "26a1a203-3a46-42cb-8cfa-f4de075907d8";  // string | The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models
            var inferenceId = "a047df00-8bdd-4d57-a9bd-6eebef36ecaa";  // string | The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.
            
            try
            {
                // Get Single Image Job
                InferenceEntity result = client.Images.FindOne(modelId, inferenceId);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ImagesApi.FindOne: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test Generate
        /// </summary>
        [Fact]
        public void GenerateTest()
        {
            var modelId = "26a1a203-3a46-42cb-8cfa-f4de075907d8";  // string | The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models
            var createInferenceDto = new CreateInferenceDto(); // CreateInferenceDto | The parameters to use to generate the image.
            
            try
            {
                // Generate an Image
                InferenceEntity result = client.Images.Generate(modelId, createInferenceDto);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ImagesApi.Generate: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListAll
        /// </summary>
        [Fact]
        public void ListAllTest()
        {
            var modelId = "26a1a203-3a46-42cb-8cfa-f4de075907d8";  // string | The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.
            var onlyFinished = true;  // bool? | If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional) 
            var page = 8.14D;  // double? | The page to request. (optional) 
            var pageSize = 8.14D;  // double? | The number of items to return per page. (optional) 
            
            try
            {
                // List All Image Jobs
                List<InferenceEntity> result = client.Images.ListAll(modelId, onlyFinished, page, pageSize);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ImagesApi.ListAll: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }
    }
}
