/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Leap.Client;
using Leap.Api;
using Leap.Model;

namespace Leap.Test.Api
{
    /// <summary>
    ///  Class for testing MusicApi
    /// </summary>
    public class MusicApiTests : IDisposable
    {
        private LeapClient client;

        public MusicApiTests()
        {
            client = new LeapClient();
            client.SetBasePath("http://127.0.0.1:4010");
            // Configure token for authorization
            client.SetAccessToken("YOUR_TOKEN");

        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test FindOne
        /// </summary>
        [Fact]
        public void FindOneTest()
        {
            var inferenceId = "inferenceId_example";  // The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.
            
            try
            {
                // Get a Music Generation Job
                MusicgenInferenceEntity result = client.Music.FindOne(inferenceId);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling MusicApi.FindOne: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test Generate
        /// </summary>
        [Fact]
        public void GenerateTest()
        {
            var prompt = "An electronic music soundtrack with a trumpet solo"; // A description of the music you want to generate.
            var mode = CreateMusicgenInferenceDto.ModeEnum.Melody; // Select a mode, each option generates different results. Melody is best for melody, music is best for full songs
            var duration = 28; // Duration of the generated audio in seconds. Max 30 seconds.
            
            var createMusicgenInferenceDto = new CreateMusicgenInferenceDto(
                prompt,
                mode,
                duration
            );
            
            try
            {
                // Generate Music
                MusicgenInferenceEntity result = client.Music.Generate(createMusicgenInferenceDto);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling MusicApi.Generate: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListAll
        /// </summary>
        [Fact]
        public void ListAllTest()
        {
            
            try
            {
                // List Music Generation Jobs
                List<MusicgenInferenceEntity> result = client.Music.ListAll();
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling MusicApi.ListAll: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }
    }
}
