/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Leap.Client.OpenAPIDateConverter;

namespace Leap.Model
{
    /// <summary>
    /// CreateAndTrainModelDto
    /// </summary>
    [DataContract(Name = "CreateAndTrainModelDto")]
    public partial class CreateAndTrainModelDto : IEquatable<CreateAndTrainModelDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAndTrainModelDto" /> class.
        /// </summary>
        /// <param name="name">Provide a name so you can more easily identify the model..</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \&quot;a photo of @me\&quot;..</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \&quot;person\&quot;. (default to &quot;person&quot;).</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails..</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both..</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both..</param>
        public CreateAndTrainModelDto(string name = default(string), string subjectKeyword = default(string), string subjectType = "person", string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>))
        {
            this.Name = name;
            this.SubjectKeyword = subjectKeyword;
            // use default value if no "subjectType" provided
            this.SubjectType = subjectType ?? "person";
            this.WebhookUrl = webhookUrl;
            this.ImageSampleUrls = imageSampleUrls;
            this.ImageSampleFiles = imageSampleFiles;
        }

        /// <summary>
        /// Provide a name so you can more easily identify the model.
        /// </summary>
        /// <value>Provide a name so you can more easily identify the model.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// This is the keyword you will use during image generation to trigger your custom subject. For example \&quot;a photo of @me\&quot;.
        /// </summary>
        /// <value>This is the keyword you will use during image generation to trigger your custom subject. For example \&quot;a photo of @me\&quot;.</value>
        [DataMember(Name = "subjectKeyword", EmitDefaultValue = false)]
        public string SubjectKeyword { get; set; }

        /// <summary>
        /// The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \&quot;person\&quot;.
        /// </summary>
        /// <value>The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \&quot;person\&quot;.</value>
        [DataMember(Name = "subjectType", EmitDefaultValue = false)]
        public string SubjectType { get; set; }

        /// <summary>
        /// An optional webhook URL that will be called with a POST request when the model completes training or fails.
        /// </summary>
        /// <value>An optional webhook URL that will be called with a POST request when the model completes training or fails.</value>
        [DataMember(Name = "webhookUrl", EmitDefaultValue = false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both.
        /// </summary>
        /// <value>An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both.</value>
        [DataMember(Name = "imageSampleUrls", EmitDefaultValue = false)]
        public List<string> ImageSampleUrls { get; set; }

        /// <summary>
        /// An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both.
        /// </summary>
        /// <value>An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both.</value>
        [DataMember(Name = "imageSampleFiles", EmitDefaultValue = false)]
        public List<System.IO.Stream> ImageSampleFiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAndTrainModelDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SubjectKeyword: ").Append(SubjectKeyword).Append("\n");
            sb.Append("  SubjectType: ").Append(SubjectType).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  ImageSampleUrls: ").Append(ImageSampleUrls).Append("\n");
            sb.Append("  ImageSampleFiles: ").Append(ImageSampleFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAndTrainModelDto);
        }

        /// <summary>
        /// Returns true if CreateAndTrainModelDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAndTrainModelDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAndTrainModelDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SubjectKeyword == input.SubjectKeyword ||
                    (this.SubjectKeyword != null &&
                    this.SubjectKeyword.Equals(input.SubjectKeyword))
                ) && 
                (
                    this.SubjectType == input.SubjectType ||
                    (this.SubjectType != null &&
                    this.SubjectType.Equals(input.SubjectType))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                ) && 
                (
                    this.ImageSampleUrls == input.ImageSampleUrls ||
                    this.ImageSampleUrls != null &&
                    input.ImageSampleUrls != null &&
                    this.ImageSampleUrls.SequenceEqual(input.ImageSampleUrls)
                ) && 
                (
                    this.ImageSampleFiles == input.ImageSampleFiles ||
                    this.ImageSampleFiles != null &&
                    input.ImageSampleFiles != null &&
                    this.ImageSampleFiles.SequenceEqual(input.ImageSampleFiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SubjectKeyword != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectKeyword.GetHashCode();
                }
                if (this.SubjectType != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectType.GetHashCode();
                }
                if (this.WebhookUrl != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookUrl.GetHashCode();
                }
                if (this.ImageSampleUrls != null)
                {
                    hashCode = (hashCode * 59) + this.ImageSampleUrls.GetHashCode();
                }
                if (this.ImageSampleFiles != null)
                {
                    hashCode = (hashCode * 59) + this.ImageSampleFiles.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
