/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Leap.Client.OpenAPIDateConverter;

namespace Leap.Model
{
    /// <summary>
    /// CreateMusicgenInferenceDto
    /// </summary>
    [DataContract(Name = "CreateMusicgenInferenceDto")]
    public partial class CreateMusicgenInferenceDto : IEquatable<CreateMusicgenInferenceDto>, IValidatableObject
    {
        /// <summary>
        /// Select a mode, each option generates different results. Melody is best for melody, music is best for full songs
        /// </summary>
        /// <value>Select a mode, each option generates different results. Melody is best for melody, music is best for full songs</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum Melody for value: melody
            /// </summary>
            [EnumMember(Value = "melody")]
            Melody = 1,

            /// <summary>
            /// Enum Music for value: music
            /// </summary>
            [EnumMember(Value = "music")]
            Music = 2

        }


        /// <summary>
        /// Select a mode, each option generates different results. Melody is best for melody, music is best for full songs
        /// </summary>
        /// <value>Select a mode, each option generates different results. Melody is best for melody, music is best for full songs</value>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = true)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMusicgenInferenceDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateMusicgenInferenceDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMusicgenInferenceDto" /> class.
        /// </summary>
        /// <param name="prompt">A description of the music you want to generate. (required) (default to &quot;An electronic music soundtrack with a trumpet solo&quot;).</param>
        /// <param name="mode">Select a mode, each option generates different results. Melody is best for melody, music is best for full songs (required) (default to ModeEnum.Melody).</param>
        /// <param name="duration">Duration of the generated audio in seconds. Max 30 seconds. (required) (default to 28D).</param>
        public CreateMusicgenInferenceDto(string prompt = "An electronic music soundtrack with a trumpet solo", ModeEnum mode = ModeEnum.Melody, double duration = 28D)
        {
            // to ensure "prompt" is required (not null)
            if (prompt == null)
            {
                throw new ArgumentNullException("prompt is a required property for CreateMusicgenInferenceDto and cannot be null");
            }
            this.Prompt = prompt;
            this.Mode = mode;
            this.Duration = duration;
        }

        /// <summary>
        /// A description of the music you want to generate.
        /// </summary>
        /// <value>A description of the music you want to generate.</value>
        [DataMember(Name = "prompt", IsRequired = true, EmitDefaultValue = true)]
        public string Prompt { get; set; }

        /// <summary>
        /// Duration of the generated audio in seconds. Max 30 seconds.
        /// </summary>
        /// <value>Duration of the generated audio in seconds. Max 30 seconds.</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public double Duration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMusicgenInferenceDto {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMusicgenInferenceDto);
        }

        /// <summary>
        /// Returns true if CreateMusicgenInferenceDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMusicgenInferenceDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMusicgenInferenceDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Prompt == input.Prompt ||
                    (this.Prompt != null &&
                    this.Prompt.Equals(input.Prompt))
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Prompt != null)
                {
                    hashCode = (hashCode * 59) + this.Prompt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
