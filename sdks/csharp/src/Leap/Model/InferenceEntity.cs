/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Leap.Client.OpenAPIDateConverter;

namespace Leap.Model
{
    /// <summary>
    /// InferenceEntity
    /// </summary>
    [DataContract(Name = "InferenceEntity")]
    public partial class InferenceEntity : IEquatable<InferenceEntity>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 1,

            /// <summary>
            /// Enum Finished for value: finished
            /// </summary>
            [EnumMember(Value = "finished")]
            Finished = 2,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 3,

            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 4

        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 1,

            /// <summary>
            /// Enum Finished for value: finished
            /// </summary>
            [EnumMember(Value = "finished")]
            Finished = 2,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 3,

            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 4

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Defines UpscalingOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UpscalingOptionEnum
        {
            /// <summary>
            /// Enum X1 for value: x1
            /// </summary>
            [EnumMember(Value = "x1")]
            X1 = 1,

            /// <summary>
            /// Enum X2 for value: x2
            /// </summary>
            [EnumMember(Value = "x2")]
            X2 = 2,

            /// <summary>
            /// Enum X4 for value: x4
            /// </summary>
            [EnumMember(Value = "x4")]
            X4 = 3

        }


        /// <summary>
        /// Gets or Sets UpscalingOption
        /// </summary>
        [DataMember(Name = "upscalingOption", IsRequired = true, EmitDefaultValue = true)]
        public UpscalingOptionEnum UpscalingOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InferenceEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InferenceEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InferenceEntity" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="prompt">prompt (required).</param>
        /// <param name="negativePrompt">negativePrompt (required).</param>
        /// <param name="seed">seed (required).</param>
        /// <param name="width">width (required).</param>
        /// <param name="height">height (required).</param>
        /// <param name="promptStrength">promptStrength (required).</param>
        /// <param name="numberOfImages">numberOfImages (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="steps">steps (required).</param>
        /// <param name="images">images (required).</param>
        /// <param name="modelId">modelId (required).</param>
        /// <param name="upscalingOption">upscalingOption (required).</param>
        public InferenceEntity(string id = default(string), DateTime createdAt = default(DateTime), string prompt = default(string), string negativePrompt = default(string), double seed = default(double), double width = default(double), double height = default(double), double promptStrength = default(double), double numberOfImages = default(double), StateEnum state = default(StateEnum), StatusEnum status = default(StatusEnum), double steps = default(double), List<InferenceImageEntity> images = default(List<InferenceImageEntity>), string modelId = default(string), UpscalingOptionEnum upscalingOption = default(UpscalingOptionEnum))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for InferenceEntity and cannot be null");
            }
            this.Id = id;
            this.CreatedAt = createdAt;
            // to ensure "prompt" is required (not null)
            if (prompt == null)
            {
                throw new ArgumentNullException("prompt is a required property for InferenceEntity and cannot be null");
            }
            this.Prompt = prompt;
            // to ensure "negativePrompt" is required (not null)
            if (negativePrompt == null)
            {
                throw new ArgumentNullException("negativePrompt is a required property for InferenceEntity and cannot be null");
            }
            this.NegativePrompt = negativePrompt;
            this.Seed = seed;
            this.Width = width;
            this.Height = height;
            this.PromptStrength = promptStrength;
            this.NumberOfImages = numberOfImages;
            this.State = state;
            this.Status = status;
            this.Steps = steps;
            // to ensure "images" is required (not null)
            if (images == null)
            {
                throw new ArgumentNullException("images is a required property for InferenceEntity and cannot be null");
            }
            this.Images = images;
            // to ensure "modelId" is required (not null)
            if (modelId == null)
            {
                throw new ArgumentNullException("modelId is a required property for InferenceEntity and cannot be null");
            }
            this.ModelId = modelId;
            this.UpscalingOption = upscalingOption;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Prompt
        /// </summary>
        [DataMember(Name = "prompt", IsRequired = true, EmitDefaultValue = true)]
        public string Prompt { get; set; }

        /// <summary>
        /// Gets or Sets NegativePrompt
        /// </summary>
        [DataMember(Name = "negativePrompt", IsRequired = true, EmitDefaultValue = true)]
        public string NegativePrompt { get; set; }

        /// <summary>
        /// Gets or Sets Seed
        /// </summary>
        [DataMember(Name = "seed", IsRequired = true, EmitDefaultValue = true)]
        public double Seed { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public double Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public double Height { get; set; }

        /// <summary>
        /// Gets or Sets PromptStrength
        /// </summary>
        [DataMember(Name = "promptStrength", IsRequired = true, EmitDefaultValue = true)]
        public double PromptStrength { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfImages
        /// </summary>
        [DataMember(Name = "numberOfImages", IsRequired = true, EmitDefaultValue = true)]
        public double NumberOfImages { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name = "steps", IsRequired = true, EmitDefaultValue = true)]
        public double Steps { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", IsRequired = true, EmitDefaultValue = true)]
        public List<InferenceImageEntity> Images { get; set; }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name = "modelId", IsRequired = true, EmitDefaultValue = true)]
        public string ModelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InferenceEntity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  NegativePrompt: ").Append(NegativePrompt).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  PromptStrength: ").Append(PromptStrength).Append("\n");
            sb.Append("  NumberOfImages: ").Append(NumberOfImages).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  UpscalingOption: ").Append(UpscalingOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InferenceEntity);
        }

        /// <summary>
        /// Returns true if InferenceEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of InferenceEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InferenceEntity input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Prompt == input.Prompt ||
                    (this.Prompt != null &&
                    this.Prompt.Equals(input.Prompt))
                ) && 
                (
                    this.NegativePrompt == input.NegativePrompt ||
                    (this.NegativePrompt != null &&
                    this.NegativePrompt.Equals(input.NegativePrompt))
                ) && 
                (
                    this.Seed == input.Seed ||
                    this.Seed.Equals(input.Seed)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.PromptStrength == input.PromptStrength ||
                    this.PromptStrength.Equals(input.PromptStrength)
                ) && 
                (
                    this.NumberOfImages == input.NumberOfImages ||
                    this.NumberOfImages.Equals(input.NumberOfImages)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Steps == input.Steps ||
                    this.Steps.Equals(input.Steps)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.UpscalingOption == input.UpscalingOption ||
                    this.UpscalingOption.Equals(input.UpscalingOption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Prompt != null)
                {
                    hashCode = (hashCode * 59) + this.Prompt.GetHashCode();
                }
                if (this.NegativePrompt != null)
                {
                    hashCode = (hashCode * 59) + this.NegativePrompt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Seed.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.PromptStrength.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfImages.GetHashCode();
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.Steps.GetHashCode();
                if (this.Images != null)
                {
                    hashCode = (hashCode * 59) + this.Images.GetHashCode();
                }
                if (this.ModelId != null)
                {
                    hashCode = (hashCode * 59) + this.ModelId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UpscalingOption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
