/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Leap.Client.OpenAPIDateConverter;

namespace Leap.Model
{
    /// <summary>
    /// ListModelsV2Response
    /// </summary>
    [DataContract(Name = "ListModelsV2Response")]
    public partial class ListModelsV2Response : IEquatable<ListModelsV2Response>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListModelsV2Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListModelsV2Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListModelsV2Response" /> class.
        /// </summary>
        /// <param name="models">models (required).</param>
        public ListModelsV2Response(List<ModelV2Entity> models = default(List<ModelV2Entity>))
        {
            // to ensure "models" is required (not null)
            if (models == null)
            {
                throw new ArgumentNullException("models is a required property for ListModelsV2Response and cannot be null");
            }
            this.Models = models;
        }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", IsRequired = true, EmitDefaultValue = true)]
        public List<ModelV2Entity> Models { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListModelsV2Response {\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListModelsV2Response);
        }

        /// <summary>
        /// Returns true if ListModelsV2Response instances are equal
        /// </summary>
        /// <param name="input">Instance of ListModelsV2Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListModelsV2Response input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Models == input.Models ||
                    this.Models != null &&
                    input.Models != null &&
                    this.Models.SequenceEqual(input.Models)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Models != null)
                {
                    hashCode = (hashCode * 59) + this.Models.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
