/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Leap.Client;
using Leap.Model;

namespace Leap.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Image Job
        /// </summary>
        /// <remarks>
        /// Delete the image job and all related images.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(string modelId, string inferenceId, int operationIndex = 0);

        /// <summary>
        /// Delete Image Job
        /// </summary>
        /// <remarks>
        /// Delete the image job and all related images.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string modelId, string inferenceId, int operationIndex = 0);
        /// <summary>
        /// Get Single Image Job
        /// </summary>
        /// <remarks>
        /// Retrieve a single image generation job, including the urls for the images generated.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InferenceEntity</returns>
        InferenceEntity FindOne(string modelId, string inferenceId, int operationIndex = 0);

        /// <summary>
        /// Get Single Image Job
        /// </summary>
        /// <remarks>
        /// Retrieve a single image generation job, including the urls for the images generated.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InferenceEntity</returns>
        ApiResponse<InferenceEntity> FindOneWithHttpInfo(string modelId, string inferenceId, int operationIndex = 0);
        /// <summary>
        /// Generate an Image
        /// </summary>
        /// <remarks>
        /// Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="createInferenceDto">The parameters to use to generate the image.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InferenceEntity</returns>
        InferenceEntity Generate(string modelId, CreateInferenceDto createInferenceDto, int operationIndex = 0);

        /// <summary>
        /// Generate an Image
        /// </summary>
        /// <remarks>
        /// Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="createInferenceDto">The parameters to use to generate the image.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InferenceEntity</returns>
        ApiResponse<InferenceEntity> GenerateWithHttpInfo(string modelId, CreateInferenceDto createInferenceDto, int operationIndex = 0);
        /// <summary>
        /// List All Image Jobs
        /// </summary>
        /// <remarks>
        /// Fetch a list of inference jobs for a specific model.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.</param>
        /// <param name="onlyFinished">If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)</param>
        /// <param name="page">The page to request. (optional)</param>
        /// <param name="pageSize">The number of items to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InferenceEntity&gt;</returns>
        List<InferenceEntity> ListAll(string modelId, bool? onlyFinished = default(bool?), decimal? page = default(decimal?), decimal? pageSize = default(decimal?), int operationIndex = 0);

        /// <summary>
        /// List All Image Jobs
        /// </summary>
        /// <remarks>
        /// Fetch a list of inference jobs for a specific model.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.</param>
        /// <param name="onlyFinished">If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)</param>
        /// <param name="page">The page to request. (optional)</param>
        /// <param name="pageSize">The number of items to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InferenceEntity&gt;</returns>
        ApiResponse<List<InferenceEntity>> ListAllWithHttpInfo(string modelId, bool? onlyFinished = default(bool?), decimal? page = default(decimal?), decimal? pageSize = default(decimal?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Image Job
        /// </summary>
        /// <remarks>
        /// Delete the image job and all related images.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string modelId, string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Image Job
        /// </summary>
        /// <remarks>
        /// Delete the image job and all related images.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string modelId, string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Single Image Job
        /// </summary>
        /// <remarks>
        /// Retrieve a single image generation job, including the urls for the images generated.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InferenceEntity</returns>
        System.Threading.Tasks.Task<InferenceEntity> FindOneAsync(string modelId, string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Single Image Job
        /// </summary>
        /// <remarks>
        /// Retrieve a single image generation job, including the urls for the images generated.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InferenceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<InferenceEntity>> FindOneWithHttpInfoAsync(string modelId, string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate an Image
        /// </summary>
        /// <remarks>
        /// Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="createInferenceDto">The parameters to use to generate the image.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InferenceEntity</returns>
        System.Threading.Tasks.Task<InferenceEntity> GenerateAsync(string modelId, CreateInferenceDto createInferenceDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate an Image
        /// </summary>
        /// <remarks>
        /// Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="createInferenceDto">The parameters to use to generate the image.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InferenceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<InferenceEntity>> GenerateWithHttpInfoAsync(string modelId, CreateInferenceDto createInferenceDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List All Image Jobs
        /// </summary>
        /// <remarks>
        /// Fetch a list of inference jobs for a specific model.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.</param>
        /// <param name="onlyFinished">If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)</param>
        /// <param name="page">The page to request. (optional)</param>
        /// <param name="pageSize">The number of items to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InferenceEntity&gt;</returns>
        System.Threading.Tasks.Task<List<InferenceEntity>> ListAllAsync(string modelId, bool? onlyFinished = default(bool?), decimal? page = default(decimal?), decimal? pageSize = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List All Image Jobs
        /// </summary>
        /// <remarks>
        /// Fetch a list of inference jobs for a specific model.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.</param>
        /// <param name="onlyFinished">If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)</param>
        /// <param name="page">The page to request. (optional)</param>
        /// <param name="pageSize">The number of items to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InferenceEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InferenceEntity>>> ListAllWithHttpInfoAsync(string modelId, bool? onlyFinished = default(bool?), decimal? page = default(decimal?), decimal? pageSize = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImagesApi : IImagesApiSync, IImagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImagesApi : IImagesApi
    {
        private Leap.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImagesApi(string basePath)
        {
            this.Configuration = Leap.Client.Configuration.MergeConfigurations(
                Leap.Client.GlobalConfiguration.Instance,
                new Leap.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Leap.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Leap.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImagesApi(Leap.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Leap.Client.Configuration.MergeConfigurations(
                Leap.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Leap.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Leap.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ImagesApi(Leap.Client.ISynchronousClient client, Leap.Client.IAsynchronousClient asyncClient, Leap.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Leap.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Leap.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Leap.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Leap.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Image Job Delete the image job and all related images.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete(string modelId, string inferenceId, int operationIndex = 0)
        {
            DeleteWithHttpInfo(modelId, inferenceId);
        }

        /// <summary>
        /// Delete Image Job Delete the image job and all related images.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Leap.Client.ApiResponse<Object> DeleteWithHttpInfo(string modelId, string inferenceId, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImagesApi->Delete");
            }

            // verify the required parameter 'inferenceId' is set
            if (inferenceId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'inferenceId' when calling ImagesApi->Delete");
            }

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("inferenceId", Leap.Client.ClientUtils.ParameterToString(inferenceId)); // path parameter

            localVarRequestOptions.Operation = "ImagesApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/images/models/{modelId}/inferences/{inferenceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Image Job Delete the image job and all related images.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string modelId, string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(modelId, inferenceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Image Job Delete the image job and all related images.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string modelId, string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImagesApi->Delete");
            }

            // verify the required parameter 'inferenceId' is set
            if (inferenceId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'inferenceId' when calling ImagesApi->Delete");
            }


            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("inferenceId", Leap.Client.ClientUtils.ParameterToString(inferenceId)); // path parameter

            localVarRequestOptions.Operation = "ImagesApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/images/models/{modelId}/inferences/{inferenceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Single Image Job Retrieve a single image generation job, including the urls for the images generated.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InferenceEntity</returns>
        public InferenceEntity FindOne(string modelId, string inferenceId, int operationIndex = 0)
        {
            Leap.Client.ApiResponse<InferenceEntity> localVarResponse = FindOneWithHttpInfo(modelId, inferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Image Job Retrieve a single image generation job, including the urls for the images generated.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InferenceEntity</returns>
        public Leap.Client.ApiResponse<InferenceEntity> FindOneWithHttpInfo(string modelId, string inferenceId, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImagesApi->FindOne");
            }

            // verify the required parameter 'inferenceId' is set
            if (inferenceId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'inferenceId' when calling ImagesApi->FindOne");
            }

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("inferenceId", Leap.Client.ClientUtils.ParameterToString(inferenceId)); // path parameter

            localVarRequestOptions.Operation = "ImagesApi.FindOne";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InferenceEntity>("/api/v1/images/models/{modelId}/inferences/{inferenceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Single Image Job Retrieve a single image generation job, including the urls for the images generated.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InferenceEntity</returns>
        public async System.Threading.Tasks.Task<InferenceEntity> FindOneAsync(string modelId, string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<InferenceEntity> localVarResponse = await FindOneWithHttpInfoAsync(modelId, inferenceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Image Job Retrieve a single image generation job, including the urls for the images generated.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="inferenceId">The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InferenceEntity)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<InferenceEntity>> FindOneWithHttpInfoAsync(string modelId, string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImagesApi->FindOne");
            }

            // verify the required parameter 'inferenceId' is set
            if (inferenceId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'inferenceId' when calling ImagesApi->FindOne");
            }


            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("inferenceId", Leap.Client.ClientUtils.ParameterToString(inferenceId)); // path parameter

            localVarRequestOptions.Operation = "ImagesApi.FindOne";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InferenceEntity>("/api/v1/images/models/{modelId}/inferences/{inferenceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an Image Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="createInferenceDto">The parameters to use to generate the image.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InferenceEntity</returns>
        public InferenceEntity Generate(string modelId, CreateInferenceDto createInferenceDto, int operationIndex = 0)
        {
            Leap.Client.ApiResponse<InferenceEntity> localVarResponse = GenerateWithHttpInfo(modelId, createInferenceDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate an Image Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="createInferenceDto">The parameters to use to generate the image.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InferenceEntity</returns>
        public Leap.Client.ApiResponse<InferenceEntity> GenerateWithHttpInfo(string modelId, CreateInferenceDto createInferenceDto, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImagesApi->Generate");
            }

            // verify the required parameter 'createInferenceDto' is set
            if (createInferenceDto == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'createInferenceDto' when calling ImagesApi->Generate");
            }

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.Data = createInferenceDto;

            localVarRequestOptions.Operation = "ImagesApi.Generate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InferenceEntity>("/api/v1/images/models/{modelId}/inferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Generate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate an Image Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="createInferenceDto">The parameters to use to generate the image.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InferenceEntity</returns>
        public async System.Threading.Tasks.Task<InferenceEntity> GenerateAsync(string modelId, CreateInferenceDto createInferenceDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<InferenceEntity> localVarResponse = await GenerateWithHttpInfoAsync(modelId, createInferenceDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate an Image Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models</param>
        /// <param name="createInferenceDto">The parameters to use to generate the image.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InferenceEntity)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<InferenceEntity>> GenerateWithHttpInfoAsync(string modelId, CreateInferenceDto createInferenceDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImagesApi->Generate");
            }

            // verify the required parameter 'createInferenceDto' is set
            if (createInferenceDto == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'createInferenceDto' when calling ImagesApi->Generate");
            }


            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.Data = createInferenceDto;

            localVarRequestOptions.Operation = "ImagesApi.Generate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InferenceEntity>("/api/v1/images/models/{modelId}/inferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Generate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Image Jobs Fetch a list of inference jobs for a specific model.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.</param>
        /// <param name="onlyFinished">If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)</param>
        /// <param name="page">The page to request. (optional)</param>
        /// <param name="pageSize">The number of items to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InferenceEntity&gt;</returns>
        public List<InferenceEntity> ListAll(string modelId, bool? onlyFinished = default(bool?), decimal? page = default(decimal?), decimal? pageSize = default(decimal?), int operationIndex = 0)
        {
            Leap.Client.ApiResponse<List<InferenceEntity>> localVarResponse = ListAllWithHttpInfo(modelId, onlyFinished, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Image Jobs Fetch a list of inference jobs for a specific model.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.</param>
        /// <param name="onlyFinished">If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)</param>
        /// <param name="page">The page to request. (optional)</param>
        /// <param name="pageSize">The number of items to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InferenceEntity&gt;</returns>
        public Leap.Client.ApiResponse<List<InferenceEntity>> ListAllWithHttpInfo(string modelId, bool? onlyFinished = default(bool?), decimal? page = default(decimal?), decimal? pageSize = default(decimal?), int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImagesApi->ListAll");
            }

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            if (onlyFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Leap.Client.ClientUtils.ParameterToMultiMap("", "onlyFinished", onlyFinished, ""));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Leap.Client.ClientUtils.ParameterToMultiMap("", "page", page, ""));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Leap.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize, ""));
            }

            localVarRequestOptions.Operation = "ImagesApi.ListAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InferenceEntity>>("/api/v1/images/models/{modelId}/inferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Image Jobs Fetch a list of inference jobs for a specific model.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.</param>
        /// <param name="onlyFinished">If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)</param>
        /// <param name="page">The page to request. (optional)</param>
        /// <param name="pageSize">The number of items to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InferenceEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<InferenceEntity>> ListAllAsync(string modelId, bool? onlyFinished = default(bool?), decimal? page = default(decimal?), decimal? pageSize = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<List<InferenceEntity>> localVarResponse = await ListAllWithHttpInfoAsync(modelId, onlyFinished, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Image Jobs Fetch a list of inference jobs for a specific model.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models.</param>
        /// <param name="onlyFinished">If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)</param>
        /// <param name="page">The page to request. (optional)</param>
        /// <param name="pageSize">The number of items to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InferenceEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<List<InferenceEntity>>> ListAllWithHttpInfoAsync(string modelId, bool? onlyFinished = default(bool?), decimal? page = default(decimal?), decimal? pageSize = default(decimal?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImagesApi->ListAll");
            }


            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            if (onlyFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Leap.Client.ClientUtils.ParameterToMultiMap("", "onlyFinished", onlyFinished, ""));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Leap.Client.ClientUtils.ParameterToMultiMap("", "page", page, ""));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Leap.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize, ""));
            }

            localVarRequestOptions.Operation = "ImagesApi.ListAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InferenceEntity>>("/api/v1/images/models/{modelId}/inferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
