/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Leap.Client;
using Leap.Model;

namespace Leap.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMusicApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a Music Generation Job
        /// </summary>
        /// <remarks>
        /// Get a specific music generation job.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inferenceId">The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MusicgenInferenceEntity</returns>
        MusicgenInferenceEntity FindOne(string inferenceId, int operationIndex = 0);

        /// <summary>
        /// Get a Music Generation Job
        /// </summary>
        /// <remarks>
        /// Get a specific music generation job.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inferenceId">The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MusicgenInferenceEntity</returns>
        ApiResponse<MusicgenInferenceEntity> FindOneWithHttpInfo(string inferenceId, int operationIndex = 0);
        /// <summary>
        /// Generate Music
        /// </summary>
        /// <remarks>
        /// Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the &#x60;duration&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMusicgenInferenceDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MusicgenInferenceEntity</returns>
        MusicgenInferenceEntity Generate(CreateMusicgenInferenceDto createMusicgenInferenceDto, int operationIndex = 0);

        /// <summary>
        /// Generate Music
        /// </summary>
        /// <remarks>
        /// Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the &#x60;duration&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMusicgenInferenceDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MusicgenInferenceEntity</returns>
        ApiResponse<MusicgenInferenceEntity> GenerateWithHttpInfo(CreateMusicgenInferenceDto createMusicgenInferenceDto, int operationIndex = 0);
        /// <summary>
        /// List Music Generation Jobs
        /// </summary>
        /// <remarks>
        /// List all music generation jobs for a workspace.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MusicgenInferenceEntity&gt;</returns>
        List<MusicgenInferenceEntity> ListAll(int operationIndex = 0);

        /// <summary>
        /// List Music Generation Jobs
        /// </summary>
        /// <remarks>
        /// List all music generation jobs for a workspace.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MusicgenInferenceEntity&gt;</returns>
        ApiResponse<List<MusicgenInferenceEntity>> ListAllWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMusicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a Music Generation Job
        /// </summary>
        /// <remarks>
        /// Get a specific music generation job.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inferenceId">The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MusicgenInferenceEntity</returns>
        System.Threading.Tasks.Task<MusicgenInferenceEntity> FindOneAsync(string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Music Generation Job
        /// </summary>
        /// <remarks>
        /// Get a specific music generation job.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inferenceId">The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MusicgenInferenceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<MusicgenInferenceEntity>> FindOneWithHttpInfoAsync(string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Music
        /// </summary>
        /// <remarks>
        /// Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the &#x60;duration&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMusicgenInferenceDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MusicgenInferenceEntity</returns>
        System.Threading.Tasks.Task<MusicgenInferenceEntity> GenerateAsync(CreateMusicgenInferenceDto createMusicgenInferenceDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Music
        /// </summary>
        /// <remarks>
        /// Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the &#x60;duration&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMusicgenInferenceDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MusicgenInferenceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<MusicgenInferenceEntity>> GenerateWithHttpInfoAsync(CreateMusicgenInferenceDto createMusicgenInferenceDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Music Generation Jobs
        /// </summary>
        /// <remarks>
        /// List all music generation jobs for a workspace.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MusicgenInferenceEntity&gt;</returns>
        System.Threading.Tasks.Task<List<MusicgenInferenceEntity>> ListAllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Music Generation Jobs
        /// </summary>
        /// <remarks>
        /// List all music generation jobs for a workspace.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MusicgenInferenceEntity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MusicgenInferenceEntity>>> ListAllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMusicApi : IMusicApiSync, IMusicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MusicApi : IMusicApi
    {
        private Leap.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MusicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MusicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MusicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MusicApi(string basePath)
        {
            this.Configuration = Leap.Client.Configuration.MergeConfigurations(
                Leap.Client.GlobalConfiguration.Instance,
                new Leap.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Leap.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Leap.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MusicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MusicApi(Leap.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Leap.Client.Configuration.MergeConfigurations(
                Leap.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Leap.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Leap.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MusicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MusicApi(Leap.Client.ISynchronousClient client, Leap.Client.IAsynchronousClient asyncClient, Leap.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Leap.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Leap.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Leap.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Leap.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a Music Generation Job Get a specific music generation job.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inferenceId">The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MusicgenInferenceEntity</returns>
        public MusicgenInferenceEntity FindOne(string inferenceId, int operationIndex = 0)
        {
            Leap.Client.ApiResponse<MusicgenInferenceEntity> localVarResponse = FindOneWithHttpInfo(inferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Music Generation Job Get a specific music generation job.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inferenceId">The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MusicgenInferenceEntity</returns>
        public Leap.Client.ApiResponse<MusicgenInferenceEntity> FindOneWithHttpInfo(string inferenceId, int operationIndex = 0)
        {
            // verify the required parameter 'inferenceId' is set
            if (inferenceId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'inferenceId' when calling MusicApi->FindOne");
            }

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("inferenceId", Leap.Client.ClientUtils.ParameterToString(inferenceId)); // path parameter

            localVarRequestOptions.Operation = "MusicApi.FindOne";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MusicgenInferenceEntity>("/api/v1/music/{inferenceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Music Generation Job Get a specific music generation job.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inferenceId">The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MusicgenInferenceEntity</returns>
        public async System.Threading.Tasks.Task<MusicgenInferenceEntity> FindOneAsync(string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<MusicgenInferenceEntity> localVarResponse = await FindOneWithHttpInfoAsync(inferenceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Music Generation Job Get a specific music generation job.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inferenceId">The ID of the music generation job to retrieve. This is the same ID returned when you submit a job.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MusicgenInferenceEntity)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<MusicgenInferenceEntity>> FindOneWithHttpInfoAsync(string inferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inferenceId' is set
            if (inferenceId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'inferenceId' when calling MusicApi->FindOne");
            }


            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("inferenceId", Leap.Client.ClientUtils.ParameterToString(inferenceId)); // path parameter

            localVarRequestOptions.Operation = "MusicApi.FindOne";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MusicgenInferenceEntity>("/api/v1/music/{inferenceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindOne", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Music Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the &#x60;duration&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMusicgenInferenceDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MusicgenInferenceEntity</returns>
        public MusicgenInferenceEntity Generate(CreateMusicgenInferenceDto createMusicgenInferenceDto, int operationIndex = 0)
        {
            Leap.Client.ApiResponse<MusicgenInferenceEntity> localVarResponse = GenerateWithHttpInfo(createMusicgenInferenceDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Music Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the &#x60;duration&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMusicgenInferenceDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MusicgenInferenceEntity</returns>
        public Leap.Client.ApiResponse<MusicgenInferenceEntity> GenerateWithHttpInfo(CreateMusicgenInferenceDto createMusicgenInferenceDto, int operationIndex = 0)
        {
            // verify the required parameter 'createMusicgenInferenceDto' is set
            if (createMusicgenInferenceDto == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'createMusicgenInferenceDto' when calling MusicApi->Generate");
            }

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMusicgenInferenceDto;

            localVarRequestOptions.Operation = "MusicApi.Generate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MusicgenInferenceEntity>("/api/v1/music", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Generate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Music Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the &#x60;duration&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMusicgenInferenceDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MusicgenInferenceEntity</returns>
        public async System.Threading.Tasks.Task<MusicgenInferenceEntity> GenerateAsync(CreateMusicgenInferenceDto createMusicgenInferenceDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<MusicgenInferenceEntity> localVarResponse = await GenerateWithHttpInfoAsync(createMusicgenInferenceDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Music Generate music by providing a text description. Generations usually take bettween 1-3 minutes. Total generation time depends on the &#x60;duration&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Music Generation Job](https://reference.tryleap.ai/reference/musiccontroller_findoneaudio) endpoint.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMusicgenInferenceDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MusicgenInferenceEntity)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<MusicgenInferenceEntity>> GenerateWithHttpInfoAsync(CreateMusicgenInferenceDto createMusicgenInferenceDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createMusicgenInferenceDto' is set
            if (createMusicgenInferenceDto == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'createMusicgenInferenceDto' when calling MusicApi->Generate");
            }


            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMusicgenInferenceDto;

            localVarRequestOptions.Operation = "MusicApi.Generate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MusicgenInferenceEntity>("/api/v1/music", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Generate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Music Generation Jobs List all music generation jobs for a workspace.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MusicgenInferenceEntity&gt;</returns>
        public List<MusicgenInferenceEntity> ListAll(int operationIndex = 0)
        {
            Leap.Client.ApiResponse<List<MusicgenInferenceEntity>> localVarResponse = ListAllWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Music Generation Jobs List all music generation jobs for a workspace.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MusicgenInferenceEntity&gt;</returns>
        public Leap.Client.ApiResponse<List<MusicgenInferenceEntity>> ListAllWithHttpInfo(int operationIndex = 0)
        {
            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MusicApi.ListAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MusicgenInferenceEntity>>("/api/v1/music", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Music Generation Jobs List all music generation jobs for a workspace.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MusicgenInferenceEntity&gt;</returns>
        public async System.Threading.Tasks.Task<List<MusicgenInferenceEntity>> ListAllAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<List<MusicgenInferenceEntity>> localVarResponse = await ListAllWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Music Generation Jobs List all music generation jobs for a workspace.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MusicgenInferenceEntity&gt;)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<List<MusicgenInferenceEntity>>> ListAllWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MusicApi.ListAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MusicgenInferenceEntity>>("/api/v1/music", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
