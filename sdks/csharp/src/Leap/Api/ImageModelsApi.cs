/*
 * Leap
 *
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Leap.Client;
using Leap.Model;

namespace Leap.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageModelsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Model
        /// </summary>
        /// <remarks>
        /// This endpoint will delete a model. This is not reversible.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelV2Entity</returns>
        ModelV2Entity DeleteModel(string modelId, int operationIndex = 0);

        /// <summary>
        /// Delete a Model
        /// </summary>
        /// <remarks>
        /// This endpoint will delete a model. This is not reversible.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelV2Entity</returns>
        ApiResponse<ModelV2Entity> DeleteModelWithHttpInfo(string modelId, int operationIndex = 0);
        /// <summary>
        /// Get a Single Model
        /// </summary>
        /// <remarks>
        /// This endpoint will return a single model.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelV2Entity</returns>
        ModelV2Entity GetModel(string modelId, int operationIndex = 0);

        /// <summary>
        /// Get a Single Model
        /// </summary>
        /// <remarks>
        /// This endpoint will return a single model.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelV2Entity</returns>
        ApiResponse<ModelV2Entity> GetModelWithHttpInfo(string modelId, int operationIndex = 0);
        /// <summary>
        /// List All Models
        /// </summary>
        /// <remarks>
        /// This endpoint will return a list of all models for the workspace.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListModelsV2Response</returns>
        ListModelsV2Response ListAllModels(int operationIndex = 0);

        /// <summary>
        /// List All Models
        /// </summary>
        /// <remarks>
        /// This endpoint will return a list of all models for the workspace.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListModelsV2Response</returns>
        ApiResponse<ListModelsV2Response> ListAllModelsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Train Model
        /// </summary>
        /// <remarks>
        /// Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a &#x60;webhookUrl&#x60; in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Provide a name so you can more easily identify the model. (optional)</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;. (optional)</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;. (optional, default to &quot;person&quot;)</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional)</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional)</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelV2Entity</returns>
        ModelV2Entity TrainModel(string name = default(string), string subjectKeyword = default(string), string subjectType = default(string), string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>), int operationIndex = 0);

        /// <summary>
        /// Train Model
        /// </summary>
        /// <remarks>
        /// Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a &#x60;webhookUrl&#x60; in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Provide a name so you can more easily identify the model. (optional)</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;. (optional)</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;. (optional, default to &quot;person&quot;)</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional)</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional)</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelV2Entity</returns>
        ApiResponse<ModelV2Entity> TrainModelWithHttpInfo(string name = default(string), string subjectKeyword = default(string), string subjectType = default(string), string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageModelsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Model
        /// </summary>
        /// <remarks>
        /// This endpoint will delete a model. This is not reversible.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelV2Entity</returns>
        System.Threading.Tasks.Task<ModelV2Entity> DeleteModelAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Model
        /// </summary>
        /// <remarks>
        /// This endpoint will delete a model. This is not reversible.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelV2Entity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelV2Entity>> DeleteModelWithHttpInfoAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a Single Model
        /// </summary>
        /// <remarks>
        /// This endpoint will return a single model.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelV2Entity</returns>
        System.Threading.Tasks.Task<ModelV2Entity> GetModelAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Single Model
        /// </summary>
        /// <remarks>
        /// This endpoint will return a single model.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelV2Entity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelV2Entity>> GetModelWithHttpInfoAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List All Models
        /// </summary>
        /// <remarks>
        /// This endpoint will return a list of all models for the workspace.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListModelsV2Response</returns>
        System.Threading.Tasks.Task<ListModelsV2Response> ListAllModelsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List All Models
        /// </summary>
        /// <remarks>
        /// This endpoint will return a list of all models for the workspace.
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListModelsV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListModelsV2Response>> ListAllModelsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Train Model
        /// </summary>
        /// <remarks>
        /// Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a &#x60;webhookUrl&#x60; in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Provide a name so you can more easily identify the model. (optional)</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;. (optional)</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;. (optional, default to &quot;person&quot;)</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional)</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional)</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelV2Entity</returns>
        System.Threading.Tasks.Task<ModelV2Entity> TrainModelAsync(string name = default(string), string subjectKeyword = default(string), string subjectType = default(string), string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Train Model
        /// </summary>
        /// <remarks>
        /// Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a &#x60;webhookUrl&#x60; in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
        /// </remarks>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Provide a name so you can more easily identify the model. (optional)</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;. (optional)</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;. (optional, default to &quot;person&quot;)</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional)</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional)</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelV2Entity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelV2Entity>> TrainModelWithHttpInfoAsync(string name = default(string), string subjectKeyword = default(string), string subjectType = default(string), string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImageModelsApi : IImageModelsApiSync, IImageModelsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImageModelsApi : IImageModelsApi
    {
        private Leap.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageModelsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageModelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImageModelsApi(string basePath)
        {
            this.Configuration = Leap.Client.Configuration.MergeConfigurations(
                Leap.Client.GlobalConfiguration.Instance,
                new Leap.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Leap.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Leap.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageModelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImageModelsApi(Leap.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Leap.Client.Configuration.MergeConfigurations(
                Leap.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Leap.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Leap.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageModelsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ImageModelsApi(Leap.Client.ISynchronousClient client, Leap.Client.IAsynchronousClient asyncClient, Leap.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Leap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Leap.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Leap.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Leap.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Leap.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a Model This endpoint will delete a model. This is not reversible.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelV2Entity</returns>
        public ModelV2Entity DeleteModel(string modelId, int operationIndex = 0)
        {
            Leap.Client.ApiResponse<ModelV2Entity> localVarResponse = DeleteModelWithHttpInfo(modelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Model This endpoint will delete a model. This is not reversible.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelV2Entity</returns>
        public Leap.Client.ApiResponse<ModelV2Entity> DeleteModelWithHttpInfo(string modelId, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImageModelsApi->DeleteModel");
            }

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter

            localVarRequestOptions.Operation = "ImageModelsApi.DeleteModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ModelV2Entity>("/api/v2/images/models/{modelId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Model This endpoint will delete a model. This is not reversible.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelV2Entity</returns>
        public async System.Threading.Tasks.Task<ModelV2Entity> DeleteModelAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<ModelV2Entity> localVarResponse = await DeleteModelWithHttpInfoAsync(modelId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Model This endpoint will delete a model. This is not reversible.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelV2Entity)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<ModelV2Entity>> DeleteModelWithHttpInfoAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImageModelsApi->DeleteModel");
            }


            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter

            localVarRequestOptions.Operation = "ImageModelsApi.DeleteModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ModelV2Entity>("/api/v2/images/models/{modelId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Single Model This endpoint will return a single model.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelV2Entity</returns>
        public ModelV2Entity GetModel(string modelId, int operationIndex = 0)
        {
            Leap.Client.ApiResponse<ModelV2Entity> localVarResponse = GetModelWithHttpInfo(modelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Single Model This endpoint will return a single model.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelV2Entity</returns>
        public Leap.Client.ApiResponse<ModelV2Entity> GetModelWithHttpInfo(string modelId, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImageModelsApi->GetModel");
            }

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter

            localVarRequestOptions.Operation = "ImageModelsApi.GetModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelV2Entity>("/api/v2/images/models/{modelId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Single Model This endpoint will return a single model.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelV2Entity</returns>
        public async System.Threading.Tasks.Task<ModelV2Entity> GetModelAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<ModelV2Entity> localVarResponse = await GetModelWithHttpInfoAsync(modelId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Single Model This endpoint will return a single model.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">The ID of the model to retrieve.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelV2Entity)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<ModelV2Entity>> GetModelWithHttpInfoAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Leap.Client.ApiException(400, "Missing required parameter 'modelId' when calling ImageModelsApi->GetModel");
            }


            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Leap.Client.ClientUtils.ParameterToString(modelId)); // path parameter

            localVarRequestOptions.Operation = "ImageModelsApi.GetModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelV2Entity>("/api/v2/images/models/{modelId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Models This endpoint will return a list of all models for the workspace.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListModelsV2Response</returns>
        public ListModelsV2Response ListAllModels(int operationIndex = 0)
        {
            Leap.Client.ApiResponse<ListModelsV2Response> localVarResponse = ListAllModelsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Models This endpoint will return a list of all models for the workspace.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListModelsV2Response</returns>
        public Leap.Client.ApiResponse<ListModelsV2Response> ListAllModelsWithHttpInfo(int operationIndex = 0)
        {
            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ImageModelsApi.ListAllModels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListModelsV2Response>("/api/v2/images/models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List All Models This endpoint will return a list of all models for the workspace.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListModelsV2Response</returns>
        public async System.Threading.Tasks.Task<ListModelsV2Response> ListAllModelsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<ListModelsV2Response> localVarResponse = await ListAllModelsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List All Models This endpoint will return a list of all models for the workspace.
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListModelsV2Response)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<ListModelsV2Response>> ListAllModelsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ImageModelsApi.ListAllModels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListModelsV2Response>("/api/v2/images/models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Train Model Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a &#x60;webhookUrl&#x60; in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Provide a name so you can more easily identify the model. (optional)</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;. (optional)</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;. (optional, default to &quot;person&quot;)</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional)</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional)</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModelV2Entity</returns>
        public ModelV2Entity TrainModel(string name = default(string), string subjectKeyword = default(string), string subjectType = default(string), string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>), int operationIndex = 0)
        {
            Leap.Client.ApiResponse<ModelV2Entity> localVarResponse = TrainModelWithHttpInfo(name, subjectKeyword, subjectType, webhookUrl, imageSampleUrls, imageSampleFiles);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Train Model Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a &#x60;webhookUrl&#x60; in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Provide a name so you can more easily identify the model. (optional)</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;. (optional)</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;. (optional, default to &quot;person&quot;)</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional)</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional)</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModelV2Entity</returns>
        public Leap.Client.ApiResponse<ModelV2Entity> TrainModelWithHttpInfo(string name = default(string), string subjectKeyword = default(string), string subjectType = default(string), string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>), int operationIndex = 0)
        {
            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.FormParameters.Add("name", Leap.Client.ClientUtils.ParameterToString(name)); // form parameter
            }
            if (subjectKeyword != null)
            {
                localVarRequestOptions.FormParameters.Add("subjectKeyword", Leap.Client.ClientUtils.ParameterToString(subjectKeyword)); // form parameter
            }
            if (subjectType != null)
            {
                localVarRequestOptions.FormParameters.Add("subjectType", Leap.Client.ClientUtils.ParameterToString(subjectType)); // form parameter
            }
            if (webhookUrl != null)
            {
                localVarRequestOptions.FormParameters.Add("webhookUrl", Leap.Client.ClientUtils.ParameterToString(webhookUrl)); // form parameter
            }
            if (imageSampleUrls != null)
            {
                localVarRequestOptions.FormParameters.Add("imageSampleUrls", Leap.Client.ClientUtils.ParameterToString(imageSampleUrls)); // form parameter
            }
            if (imageSampleFiles != null)
            {
                foreach (var file in imageSampleFiles)
                {
                    localVarRequestOptions.FileParameters.Add("imageSampleFiles", file);
                }
            }

            localVarRequestOptions.Operation = "ImageModelsApi.TrainModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModelV2Entity>("/api/v2/images/models/new", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrainModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Train Model Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a &#x60;webhookUrl&#x60; in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Provide a name so you can more easily identify the model. (optional)</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;. (optional)</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;. (optional, default to &quot;person&quot;)</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional)</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional)</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelV2Entity</returns>
        public async System.Threading.Tasks.Task<ModelV2Entity> TrainModelAsync(string name = default(string), string subjectKeyword = default(string), string subjectType = default(string), string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Leap.Client.ApiResponse<ModelV2Entity> localVarResponse = await TrainModelWithHttpInfoAsync(name, subjectKeyword, subjectType, webhookUrl, imageSampleUrls, imageSampleFiles, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Train Model Upload a few image samples, and train a new model. Training usually takes 20-40 minutes. To be notified when the model completes training you must provide a &#x60;webhookUrl&#x60; in the training request, or check for completion by calling [Get a Single Model](https://reference.tryleap.ai/reference/get-model-1). After training completes, you can use the model to generate images with [Generate Images](https://reference.tryleap.ai/reference/inferencescontroller_create-1).
        /// </summary>
        /// <exception cref="Leap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Provide a name so you can more easily identify the model. (optional)</param>
        /// <param name="subjectKeyword">This is the keyword you will use during image generation to trigger your custom subject. For example \\\&quot;a photo of @me\\\&quot;. (optional)</param>
        /// <param name="subjectType">The subject type - a short description, usually a noun, that describes what the underlying model is learning. For example: person, man, woman, cat, dog, icon, style. Defaults to \\\&quot;person\\\&quot;. (optional, default to &quot;person&quot;)</param>
        /// <param name="webhookUrl">An optional webhook URL that will be called with a POST request when the model completes training or fails. (optional)</param>
        /// <param name="imageSampleUrls">An array of strings containing the URLs of the images to upload. Either this or imageSampleFiles is required, but not both. (optional)</param>
        /// <param name="imageSampleFiles">An array of files containing the images to upload. Either this or imageSampleUrls is required, but not both. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelV2Entity)</returns>
        public async System.Threading.Tasks.Task<Leap.Client.ApiResponse<ModelV2Entity>> TrainModelWithHttpInfoAsync(string name = default(string), string subjectKeyword = default(string), string subjectType = default(string), string webhookUrl = default(string), List<string> imageSampleUrls = default(List<string>), List<System.IO.Stream> imageSampleFiles = default(List<System.IO.Stream>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Leap.Client.RequestOptions localVarRequestOptions = new Leap.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Leap.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Leap.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.FormParameters.Add("name", Leap.Client.ClientUtils.ParameterToString(name)); // form parameter
            }
            if (subjectKeyword != null)
            {
                localVarRequestOptions.FormParameters.Add("subjectKeyword", Leap.Client.ClientUtils.ParameterToString(subjectKeyword)); // form parameter
            }
            if (subjectType != null)
            {
                localVarRequestOptions.FormParameters.Add("subjectType", Leap.Client.ClientUtils.ParameterToString(subjectType)); // form parameter
            }
            if (webhookUrl != null)
            {
                localVarRequestOptions.FormParameters.Add("webhookUrl", Leap.Client.ClientUtils.ParameterToString(webhookUrl)); // form parameter
            }
            if (imageSampleUrls != null)
            {
                localVarRequestOptions.FormParameters.Add("imageSampleUrls", Leap.Client.ClientUtils.ParameterToString(imageSampleUrls)); // form parameter
            }
            if (imageSampleFiles != null)
            {
                foreach (var file in imageSampleFiles)
                {
                    localVarRequestOptions.FileParameters.Add("imageSampleFiles", file);
                }
            }

            localVarRequestOptions.Operation = "ImageModelsApi.TrainModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModelV2Entity>("/api/v2/images/models/new", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrainModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
