/*
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.leap.client.api;

import com.konfigthis.leap.client.ApiCallback;
import com.konfigthis.leap.client.ApiClient;
import com.konfigthis.leap.client.ApiException;
import com.konfigthis.leap.client.ApiResponse;
import com.konfigthis.leap.client.Configuration;
import com.konfigthis.leap.client.Pair;
import com.konfigthis.leap.client.ProgressRequestBody;
import com.konfigthis.leap.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.leap.client.model.CreateInferenceDto;
import com.konfigthis.leap.client.model.InferenceEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ImagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteCall(String modelId, String inferenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/images/models/{modelId}/inferences/{inferenceId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()))
            .replace("{" + "inferenceId" + "}", localVarApiClient.escapeString(inferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String modelId, String inferenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling delete(Async)");
        }

        // verify the required parameter 'inferenceId' is set
        if (inferenceId == null) {
            throw new ApiException("Missing the required parameter 'inferenceId' when calling delete(Async)");
        }

        return deleteCall(modelId, inferenceId, _callback);

    }


    private ApiResponse<Void> deleteWithHttpInfo(String modelId, String inferenceId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(modelId, inferenceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAsync(String modelId, String inferenceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(modelId, inferenceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private final String modelId;
        private final String inferenceId;

        private DeleteRequestBuilder(String modelId, String inferenceId) {
            this.modelId = modelId;
            this.inferenceId = inferenceId;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(modelId, inferenceId, _callback);
        }


        /**
         * Execute delete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWithHttpInfo(modelId, inferenceId);
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(modelId, inferenceId);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully deleted image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAsync(modelId, inferenceId, _callback);
        }
    }

    /**
     * Delete Image Job
     * Delete the image job and all related images.
     * @param modelId The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models (required)
     * @param inferenceId The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job. (required)
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted image generation job. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestBuilder delete(String modelId, String inferenceId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        if (inferenceId == null) throw new IllegalArgumentException("\"inferenceId\" is required but got null");
            

        return new DeleteRequestBuilder(modelId, inferenceId);
    }
    private okhttp3.Call findOneCall(String modelId, String inferenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/images/models/{modelId}/inferences/{inferenceId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()))
            .replace("{" + "inferenceId" + "}", localVarApiClient.escapeString(inferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findOneValidateBeforeCall(String modelId, String inferenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling findOne(Async)");
        }

        // verify the required parameter 'inferenceId' is set
        if (inferenceId == null) {
            throw new ApiException("Missing the required parameter 'inferenceId' when calling findOne(Async)");
        }

        return findOneCall(modelId, inferenceId, _callback);

    }


    private ApiResponse<InferenceEntity> findOneWithHttpInfo(String modelId, String inferenceId) throws ApiException {
        okhttp3.Call localVarCall = findOneValidateBeforeCall(modelId, inferenceId, null);
        Type localVarReturnType = new TypeToken<InferenceEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findOneAsync(String modelId, String inferenceId, final ApiCallback<InferenceEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = findOneValidateBeforeCall(modelId, inferenceId, _callback);
        Type localVarReturnType = new TypeToken<InferenceEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindOneRequestBuilder {
        private final String modelId;
        private final String inferenceId;

        private FindOneRequestBuilder(String modelId, String inferenceId) {
            this.modelId = modelId;
            this.inferenceId = inferenceId;
        }

        /**
         * Build call for findOne
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findOneCall(modelId, inferenceId, _callback);
        }


        /**
         * Execute findOne request
         * @return InferenceEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public InferenceEntity execute() throws ApiException {
            ApiResponse<InferenceEntity> localVarResp = findOneWithHttpInfo(modelId, inferenceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findOne request with HTTP info returned
         * @return ApiResponse&lt;InferenceEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InferenceEntity> executeWithHttpInfo() throws ApiException {
            return findOneWithHttpInfo(modelId, inferenceId);
        }

        /**
         * Execute findOne request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InferenceEntity> _callback) throws ApiException {
            return findOneAsync(modelId, inferenceId, _callback);
        }
    }

    /**
     * Get Single Image Job
     * Retrieve a single image generation job, including the urls for the images generated.
     * @param modelId The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models (required)
     * @param inferenceId The ID of the image generation job to retrieve. This is the same ID that is returned when you submit a new image generation job. (required)
     * @return FindOneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved image generation job. </td><td>  -  </td></tr>
     </table>
     */
    public FindOneRequestBuilder findOne(String modelId, String inferenceId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        if (inferenceId == null) throw new IllegalArgumentException("\"inferenceId\" is required but got null");
            

        return new FindOneRequestBuilder(modelId, inferenceId);
    }
    private okhttp3.Call generateCall(String modelId, CreateInferenceDto createInferenceDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInferenceDto;

        // create path and map variables
        String localVarPath = "/api/v1/images/models/{modelId}/inferences"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateValidateBeforeCall(String modelId, CreateInferenceDto createInferenceDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling generate(Async)");
        }

        // verify the required parameter 'createInferenceDto' is set
        if (createInferenceDto == null) {
            throw new ApiException("Missing the required parameter 'createInferenceDto' when calling generate(Async)");
        }

        return generateCall(modelId, createInferenceDto, _callback);

    }


    private ApiResponse<InferenceEntity> generateWithHttpInfo(String modelId, CreateInferenceDto createInferenceDto) throws ApiException {
        okhttp3.Call localVarCall = generateValidateBeforeCall(modelId, createInferenceDto, null);
        Type localVarReturnType = new TypeToken<InferenceEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateAsync(String modelId, CreateInferenceDto createInferenceDto, final ApiCallback<InferenceEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateValidateBeforeCall(modelId, createInferenceDto, _callback);
        Type localVarReturnType = new TypeToken<InferenceEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateRequestBuilder {
        private final String prompt;
        private final String modelId;
        private String negativePrompt;
        private Double steps;
        private Double width;
        private Double height;
        private Double numberOfImages;
        private Double promptStrength;
        private Double seed;
        private String webhookUrl;

        private GenerateRequestBuilder(String prompt, String modelId) {
            this.prompt = prompt;
            this.modelId = modelId;
        }

        /**
         * Set negativePrompt
         * @param negativePrompt A text description of what the image should try to avoid generating. (optional, default to asymmetric, watermarks)
         * @return GenerateRequestBuilder
         */
        public GenerateRequestBuilder negativePrompt(String negativePrompt) {
            this.negativePrompt = negativePrompt;
            return this;
        }
        
        /**
         * Set steps
         * @param steps How many steps the AI will take to generate the image. Lower is faster but less detailed, higher is slower more detailed. (optional, default to 50)
         * @return GenerateRequestBuilder
         */
        public GenerateRequestBuilder steps(Double steps) {
            this.steps = steps;
            return this;
        }
        
        /**
         * Set width
         * @param width The width of the image to use for the inference. Must be a multiple of 8. For best results use 1024x1024 for SDXL, and 512x512 for other models. (optional, default to 1024)
         * @return GenerateRequestBuilder
         */
        public GenerateRequestBuilder width(Double width) {
            this.width = width;
            return this;
        }
        
        /**
         * Set height
         * @param height The height of the image to use for the inference. Must be a multiple of 8. For best results use 1024x1024 for SDXL, and 512x512 for other models. (optional, default to 1024)
         * @return GenerateRequestBuilder
         */
        public GenerateRequestBuilder height(Double height) {
            this.height = height;
            return this;
        }
        
        /**
         * Set numberOfImages
         * @param numberOfImages The number of images to generate, up to 4. (optional, default to 1)
         * @return GenerateRequestBuilder
         */
        public GenerateRequestBuilder numberOfImages(Double numberOfImages) {
            this.numberOfImages = numberOfImages;
            return this;
        }
        
        /**
         * Set promptStrength
         * @param promptStrength The higher the prompt strength, the closer the generated image will be to the prompt. Must be between 0 and 30. (optional, default to 7)
         * @return GenerateRequestBuilder
         */
        public GenerateRequestBuilder promptStrength(Double promptStrength) {
            this.promptStrength = promptStrength;
            return this;
        }
        
        /**
         * Set seed
         * @param seed A random number to use as a seed when generating the image. This is helpful if you want to generate the same image multiple times. If you want to generate different images, keep this empty or provide a random number. (optional, default to 4523184)
         * @return GenerateRequestBuilder
         */
        public GenerateRequestBuilder seed(Double seed) {
            this.seed = seed;
            return this;
        }
        
        /**
         * Set webhookUrl
         * @param webhookUrl An optional webhook URL that will be called with a POST request when the image generation request completes. (optional)
         * @return GenerateRequestBuilder
         */
        public GenerateRequestBuilder webhookUrl(String webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }
        
        /**
         * Build call for generate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully submitted image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateInferenceDto createInferenceDto = buildBodyParams();
            return generateCall(modelId, createInferenceDto, _callback);
        }

        private CreateInferenceDto buildBodyParams() {
            CreateInferenceDto createInferenceDto = new CreateInferenceDto();
            createInferenceDto.prompt(this.prompt);
            createInferenceDto.negativePrompt(this.negativePrompt);
            createInferenceDto.steps(this.steps);
            createInferenceDto.width(this.width);
            createInferenceDto.height(this.height);
            createInferenceDto.numberOfImages(this.numberOfImages);
            createInferenceDto.promptStrength(this.promptStrength);
            createInferenceDto.seed(this.seed);
            createInferenceDto.webhookUrl(this.webhookUrl);
            return createInferenceDto;
        }

        /**
         * Execute generate request
         * @return InferenceEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully submitted image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public InferenceEntity execute() throws ApiException {
            CreateInferenceDto createInferenceDto = buildBodyParams();
            ApiResponse<InferenceEntity> localVarResp = generateWithHttpInfo(modelId, createInferenceDto);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generate request with HTTP info returned
         * @return ApiResponse&lt;InferenceEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully submitted image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InferenceEntity> executeWithHttpInfo() throws ApiException {
            CreateInferenceDto createInferenceDto = buildBodyParams();
            return generateWithHttpInfo(modelId, createInferenceDto);
        }

        /**
         * Execute generate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully submitted image generation job. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InferenceEntity> _callback) throws ApiException {
            CreateInferenceDto createInferenceDto = buildBodyParams();
            return generateAsync(modelId, createInferenceDto, _callback);
        }
    }

    /**
     * Generate an Image
     * Generate an image by providing a text description. Generations usually take bettween 4-20 seconds per image. Total generation time depends on the number of &#x60;steps&#x60; and &#x60;noOfImages&#x60; you select. This endpoint will submit the generation job and return immediately. To retrieve the results you must provide a webhook URL or query/poll the [Get a Single Image Job](https://reference.tryleap.ai/reference/inferencescontroller_findone-1) endpoint.
     * @param modelId The ID of the model to use to generate images. This can be a custom model, or a public model. To view the list of public models, visit: https://docs.tryleap.ai/public-models (required)
     * @param createInferenceDto  (required)
     * @return GenerateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully submitted image generation job. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateRequestBuilder generate(String prompt, String modelId) throws IllegalArgumentException {
        if (prompt == null) throw new IllegalArgumentException("\"prompt\" is required but got null");
            

        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        return new GenerateRequestBuilder(prompt, modelId);
    }
    private okhttp3.Call listAllCall(String modelId, Boolean onlyFinished, Double page, Double pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/images/models/{modelId}/inferences"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (onlyFinished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFinished", onlyFinished));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String modelId, Boolean onlyFinished, Double page, Double pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling listAll(Async)");
        }

        return listAllCall(modelId, onlyFinished, page, pageSize, _callback);

    }


    private ApiResponse<List<InferenceEntity>> listAllWithHttpInfo(String modelId, Boolean onlyFinished, Double page, Double pageSize) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(modelId, onlyFinished, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<InferenceEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String modelId, Boolean onlyFinished, Double page, Double pageSize, final ApiCallback<List<InferenceEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(modelId, onlyFinished, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<InferenceEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private final String modelId;
        private Boolean onlyFinished;
        private Double page;
        private Double pageSize;

        private ListAllRequestBuilder(String modelId) {
            this.modelId = modelId;
        }

        /**
         * Set onlyFinished
         * @param onlyFinished If set to true, only finished inferences will be returned. If set to false or not set, all inference jobs will be returned. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder onlyFinished(Boolean onlyFinished) {
            this.onlyFinished = onlyFinished;
            return this;
        }
        
        /**
         * Set page
         * @param page The page to request. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of items to return per page. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder pageSize(Double pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved list of image generation jobs. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(modelId, onlyFinished, page, pageSize, _callback);
        }


        /**
         * Execute listAll request
         * @return List&lt;InferenceEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved list of image generation jobs. </td><td>  -  </td></tr>
         </table>
         */
        public List<InferenceEntity> execute() throws ApiException {
            ApiResponse<List<InferenceEntity>> localVarResp = listAllWithHttpInfo(modelId, onlyFinished, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;InferenceEntity&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved list of image generation jobs. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<InferenceEntity>> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(modelId, onlyFinished, page, pageSize);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved list of image generation jobs. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<InferenceEntity>> _callback) throws ApiException {
            return listAllAsync(modelId, onlyFinished, page, pageSize, _callback);
        }
    }

    /**
     * List All Image Jobs
     * Fetch a list of inference jobs for a specific model.
     * @param modelId The ID of the model to generate images. This can be a custom model or a public model. Visit: https://docs.tryleap.ai/public-models to view the list of public models. (required)
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved list of image generation jobs. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll(String modelId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        return new ListAllRequestBuilder(modelId);
    }
}
