/*
 * Leap
 * The Official Leap API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.leap.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.leap.client.model.InferenceImageEntity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.leap.client.JSON;

/**
 * InferenceEntity
 */
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InferenceEntity {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private String prompt;

  public static final String SERIALIZED_NAME_NEGATIVE_PROMPT = "negativePrompt";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_PROMPT)
  private String negativePrompt;

  public static final String SERIALIZED_NAME_SEED = "seed";
  @SerializedName(SERIALIZED_NAME_SEED)
  private Double seed;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Double width;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Double height;

  public static final String SERIALIZED_NAME_PROMPT_STRENGTH = "promptStrength";
  @SerializedName(SERIALIZED_NAME_PROMPT_STRENGTH)
  private Double promptStrength;

  public static final String SERIALIZED_NAME_NUMBER_OF_IMAGES = "numberOfImages";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_IMAGES)
  private Double numberOfImages;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    FAILED("failed"),
    
    FINISHED("finished"),
    
    PROCESSING("processing"),
    
    QUEUED("queued");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    FAILED("failed"),
    
    FINISHED("finished"),
    
    PROCESSING("processing"),
    
    QUEUED("queued");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private Double steps;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<InferenceImageEntity> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  /**
   * Gets or Sets upscalingOption
   */
  @JsonAdapter(UpscalingOptionEnum.Adapter.class)
  public enum UpscalingOptionEnum {
    X1("x1"),
    
    X2("x2"),
    
    X4("x4");

    private String value;

    UpscalingOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpscalingOptionEnum fromValue(String value) {
      for (UpscalingOptionEnum b : UpscalingOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpscalingOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpscalingOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpscalingOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpscalingOptionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UPSCALING_OPTION = "upscalingOption";
  @SerializedName(SERIALIZED_NAME_UPSCALING_OPTION)
  private UpscalingOptionEnum upscalingOption;

  public InferenceEntity() {
  }

  public InferenceEntity id(String id) {

    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {

    
    
    
    this.id = id;
  }


  public InferenceEntity createdAt(OffsetDateTime createdAt) {

    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {

    
    
    
    this.createdAt = createdAt;
  }


  public InferenceEntity prompt(String prompt) {

    
    
    
    
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPrompt() {
    return prompt;
  }


  public void setPrompt(String prompt) {

    
    
    
    this.prompt = prompt;
  }


  public InferenceEntity negativePrompt(String negativePrompt) {

    
    
    
    
    this.negativePrompt = negativePrompt;
    return this;
  }

   /**
   * Get negativePrompt
   * @return negativePrompt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNegativePrompt() {
    return negativePrompt;
  }


  public void setNegativePrompt(String negativePrompt) {

    
    
    
    this.negativePrompt = negativePrompt;
  }


  public InferenceEntity seed(Double seed) {

    
    
    
    
    this.seed = seed;
    return this;
  }

  public InferenceEntity seed(Integer seed) {

    
    
    
    
    this.seed = seed.doubleValue();
    return this;
  }

   /**
   * Get seed
   * @return seed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getSeed() {
    return seed;
  }


  public void setSeed(Double seed) {

    
    
    
    this.seed = seed;
  }


  public InferenceEntity width(Double width) {

    
    
    
    
    this.width = width;
    return this;
  }

  public InferenceEntity width(Integer width) {

    
    
    
    
    this.width = width.doubleValue();
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getWidth() {
    return width;
  }


  public void setWidth(Double width) {

    
    
    
    this.width = width;
  }


  public InferenceEntity height(Double height) {

    
    
    
    
    this.height = height;
    return this;
  }

  public InferenceEntity height(Integer height) {

    
    
    
    
    this.height = height.doubleValue();
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getHeight() {
    return height;
  }


  public void setHeight(Double height) {

    
    
    
    this.height = height;
  }


  public InferenceEntity promptStrength(Double promptStrength) {

    
    
    
    
    this.promptStrength = promptStrength;
    return this;
  }

  public InferenceEntity promptStrength(Integer promptStrength) {

    
    
    
    
    this.promptStrength = promptStrength.doubleValue();
    return this;
  }

   /**
   * Get promptStrength
   * @return promptStrength
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getPromptStrength() {
    return promptStrength;
  }


  public void setPromptStrength(Double promptStrength) {

    
    
    
    this.promptStrength = promptStrength;
  }


  public InferenceEntity numberOfImages(Double numberOfImages) {

    
    
    
    
    this.numberOfImages = numberOfImages;
    return this;
  }

  public InferenceEntity numberOfImages(Integer numberOfImages) {

    
    
    
    
    this.numberOfImages = numberOfImages.doubleValue();
    return this;
  }

   /**
   * Get numberOfImages
   * @return numberOfImages
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getNumberOfImages() {
    return numberOfImages;
  }


  public void setNumberOfImages(Double numberOfImages) {

    
    
    
    this.numberOfImages = numberOfImages;
  }


  public InferenceEntity state(StateEnum state) {

    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {

    
    
    
    this.state = state;
  }


  public InferenceEntity status(StatusEnum status) {

    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {

    
    
    
    this.status = status;
  }


  public InferenceEntity steps(Double steps) {

    
    
    
    
    this.steps = steps;
    return this;
  }

  public InferenceEntity steps(Integer steps) {

    
    
    
    
    this.steps = steps.doubleValue();
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getSteps() {
    return steps;
  }


  public void setSteps(Double steps) {

    
    
    
    this.steps = steps;
  }


  public InferenceEntity images(List<InferenceImageEntity> images) {

    
    
    
    
    this.images = images;
    return this;
  }

  public InferenceEntity addImagesItem(InferenceImageEntity imagesItem) {
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<InferenceImageEntity> getImages() {
    return images;
  }


  public void setImages(List<InferenceImageEntity> images) {

    
    
    
    this.images = images;
  }


  public InferenceEntity modelId(String modelId) {

    
    
    
    
    this.modelId = modelId;
    return this;
  }

   /**
   * Get modelId
   * @return modelId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getModelId() {
    return modelId;
  }


  public void setModelId(String modelId) {

    
    
    
    this.modelId = modelId;
  }


  public InferenceEntity upscalingOption(UpscalingOptionEnum upscalingOption) {

    
    
    
    
    this.upscalingOption = upscalingOption;
    return this;
  }

   /**
   * Get upscalingOption
   * @return upscalingOption
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UpscalingOptionEnum getUpscalingOption() {
    return upscalingOption;
  }


  public void setUpscalingOption(UpscalingOptionEnum upscalingOption) {

    
    
    
    this.upscalingOption = upscalingOption;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InferenceEntity instance itself
   */
  public InferenceEntity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InferenceEntity inferenceEntity = (InferenceEntity) o;
    return Objects.equals(this.id, inferenceEntity.id) &&
        Objects.equals(this.createdAt, inferenceEntity.createdAt) &&
        Objects.equals(this.prompt, inferenceEntity.prompt) &&
        Objects.equals(this.negativePrompt, inferenceEntity.negativePrompt) &&
        Objects.equals(this.seed, inferenceEntity.seed) &&
        Objects.equals(this.width, inferenceEntity.width) &&
        Objects.equals(this.height, inferenceEntity.height) &&
        Objects.equals(this.promptStrength, inferenceEntity.promptStrength) &&
        Objects.equals(this.numberOfImages, inferenceEntity.numberOfImages) &&
        Objects.equals(this.state, inferenceEntity.state) &&
        Objects.equals(this.status, inferenceEntity.status) &&
        Objects.equals(this.steps, inferenceEntity.steps) &&
        Objects.equals(this.images, inferenceEntity.images) &&
        Objects.equals(this.modelId, inferenceEntity.modelId) &&
        Objects.equals(this.upscalingOption, inferenceEntity.upscalingOption)&&
        Objects.equals(this.additionalProperties, inferenceEntity.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, prompt, negativePrompt, seed, width, height, promptStrength, numberOfImages, state, status, steps, images, modelId, upscalingOption, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InferenceEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    negativePrompt: ").append(toIndentedString(negativePrompt)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    promptStrength: ").append(toIndentedString(promptStrength)).append("\n");
    sb.append("    numberOfImages: ").append(toIndentedString(numberOfImages)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    upscalingOption: ").append(toIndentedString(upscalingOption)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("createdAt");
    openapiFields.add("prompt");
    openapiFields.add("negativePrompt");
    openapiFields.add("seed");
    openapiFields.add("width");
    openapiFields.add("height");
    openapiFields.add("promptStrength");
    openapiFields.add("numberOfImages");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("steps");
    openapiFields.add("images");
    openapiFields.add("modelId");
    openapiFields.add("upscalingOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("prompt");
    openapiRequiredFields.add("negativePrompt");
    openapiRequiredFields.add("seed");
    openapiRequiredFields.add("width");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("promptStrength");
    openapiRequiredFields.add("numberOfImages");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("steps");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("modelId");
    openapiRequiredFields.add("upscalingOption");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InferenceEntity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InferenceEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InferenceEntity is not found in the empty JSON string", InferenceEntity.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InferenceEntity.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt").toString()));
      }
      if (!jsonObj.get("negativePrompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negativePrompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negativePrompt").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        InferenceImageEntity.validateJsonObject(jsonArrayimages.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if (!jsonObj.get("upscalingOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upscalingOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upscalingOption").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InferenceEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InferenceEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InferenceEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InferenceEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<InferenceEntity>() {
           @Override
           public void write(JsonWriter out, InferenceEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InferenceEntity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InferenceEntity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InferenceEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InferenceEntity
  * @throws IOException if the JSON string is invalid with respect to InferenceEntity
  */
  public static InferenceEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InferenceEntity.class);
  }

 /**
  * Convert an instance of InferenceEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

